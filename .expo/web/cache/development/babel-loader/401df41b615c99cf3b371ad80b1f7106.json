{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ThemeConsumer = exports.default = exports.ThemeContext = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _deepmerge = _interopRequireDefault(require(\"deepmerge\"));\n\nvar _colors = _interopRequireDefault(require(\"./colors\"));\n\nvar _colorsDark = _interopRequireDefault(require(\"./colorsDark\"));\n\nvar _jsxFileName = \"C:\\\\Users\\\\Benny\\\\Desktop\\\\ReactNativeDrinkGame\\\\node_modules\\\\react-native-elements\\\\src\\\\config\\\\ThemeProvider.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar ThemeContext = _react.default.createContext({\n  theme: {\n    colors: _colors.default\n  }\n});\n\nexports.ThemeContext = ThemeContext;\n\nvar ThemeProvider = function (_React$Component) {\n  (0, _inherits2.default)(ThemeProvider, _React$Component);\n\n  var _super = _createSuper(ThemeProvider);\n\n  function ThemeProvider(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ThemeProvider);\n    _this = _super.call(this, props);\n\n    _this.updateTheme = function (updates) {\n      _this.setState(function (_ref) {\n        var theme = _ref.theme;\n        return {\n          theme: (0, _deepmerge.default)(theme, updates)\n        };\n      });\n    };\n\n    _this.replaceTheme = function (theme) {\n      _this.setState(function () {\n        return {\n          theme: (0, _deepmerge.default)(_this.defaultTheme, theme)\n        };\n      });\n    };\n\n    _this.getTheme = function () {\n      return _this.state.theme;\n    };\n\n    var defaultColors = props.useDark ? _colorsDark.default : _colors.default;\n    _this.defaultTheme = (0, _deepmerge.default)({\n      colors: defaultColors\n    }, props.theme);\n    _this.state = {\n      theme: _this.defaultTheme,\n      useDark: props.useDark\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(ThemeProvider, [{\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(ThemeContext.Provider, {\n        value: {\n          theme: this.state.theme,\n          updateTheme: this.updateTheme,\n          replaceTheme: this.replaceTheme\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 7\n        }\n      }, this.props.children);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var useDark = props.useDark;\n\n      if (useDark !== state.useDark) {\n        var defaultColors = useDark ? _colorsDark.default : _colors.default;\n        return {\n          theme: (0, _deepmerge.default)(state.theme, (0, _deepmerge.default)({\n            colors: defaultColors\n          }, props.theme)),\n          useDark: useDark\n        };\n      }\n\n      return null;\n    }\n  }]);\n  return ThemeProvider;\n}(_react.default.Component);\n\nexports.default = ThemeProvider;\nThemeProvider.propTypes = {\n  theme: _propTypes.default.object,\n  children: _propTypes.default.node.isRequired,\n  useDark: _propTypes.default.bool\n};\nThemeProvider.defaultProps = {\n  theme: {},\n  useDark: false\n};\nvar ThemeConsumer = ThemeContext.Consumer;\nexports.ThemeConsumer = ThemeConsumer;","map":{"version":3,"sources":["C:/Users/Benny/Desktop/ReactNativeDrinkGame/node_modules/react-native-elements/src/config/ThemeProvider.js"],"names":["ThemeContext","React","createContext","theme","colors","ThemeProvider","props","updateTheme","updates","setState","replaceTheme","defaultTheme","getTheme","state","defaultColors","useDark","darkColors","children","Component","propTypes","PropTypes","object","node","isRequired","bool","defaultProps","ThemeConsumer","Consumer"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;AAEO,IAAMA,YAAY,GAAGC,eAAMC,aAAN,CAAoB;AAC9CC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAANA;AADK;AADuC,CAApB,CAArB;;;;IAMcC,a;;;;;AACnB,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;AACjB,8BAAMA,KAAN;;AADiB,UAoCnBC,WApCmB,GAoCL,UAACC,OAAD,EAAa;AACzB,YAAKC,QAAL,CAAc;AAAA,YAAGN,KAAH,QAAGA,KAAH;AAAA,eAAgB;AAC5BA,UAAAA,KAAK,EAAE,wBAAUA,KAAV,EAAiBK,OAAjB;AADqB,SAAhB;AAAA,OAAd;AAGD,KAxCkB;;AAAA,UA0CnBE,YA1CmB,GA0CJ,UAACP,KAAD,EAAW;AACxB,YAAKM,QAAL,CAAc;AAAA,eAAO;AACnBN,UAAAA,KAAK,EAAE,wBAAU,MAAKQ,YAAf,EAA6BR,KAA7B;AADY,SAAP;AAAA,OAAd;AAGD,KA9CkB;;AAAA,UAgDnBS,QAhDmB,GAgDR;AAAA,aAAM,MAAKC,KAAL,CAAWV,KAAjB;AAAA,KAhDQ;;AAGjB,QAAMW,aAAa,GAAGR,KAAK,CAACS,OAAN,GAAgBC,mBAAhB,GAA6BZ,eAAnD;AAEA,UAAKO,YAAL,GAAoB,wBAClB;AACEP,MAAAA,MAAM,EAAEU;AADV,KADkB,EAIlBR,KAAK,CAACH,KAJY,CAApB;AAMA,UAAKU,KAAL,GAAa;AACXV,MAAAA,KAAK,EAAE,MAAKQ,YADD;AAEXI,MAAAA,OAAO,EAAET,KAAK,CAACS;AAFJ,KAAb;AAXiB;AAelB;;;;6BAmCQ;AACP,aACE,6BAAC,YAAD,CAAc,QAAd;AACE,QAAA,KAAK,EAAE;AACLZ,UAAAA,KAAK,EAAE,KAAKU,KAAL,CAAWV,KADb;AAELI,UAAAA,WAAW,EAAE,KAAKA,WAFb;AAGLG,UAAAA,YAAY,EAAE,KAAKA;AAHd,SADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOG,KAAKJ,KAAL,CAAWW,QAPd,CADF;AAWD;;;6CA7C+BX,K,EAAOO,K,EAAO;AAAA,UACpCE,OADoC,GACxBT,KADwB,CACpCS,OADoC;;AAE5C,UAAIA,OAAO,KAAKF,KAAK,CAACE,OAAtB,EAA+B;AAC7B,YAAMD,aAAa,GAAGC,OAAO,GAAGC,mBAAH,GAAgBZ,eAA7C;AACA,eAAO;AACLD,UAAAA,KAAK,EAAE,wBACLU,KAAK,CAACV,KADD,EAEL,wBACE;AACEC,YAAAA,MAAM,EAAEU;AADV,WADF,EAIER,KAAK,CAACH,KAJR,CAFK,CADF;AAULY,UAAAA,OAAO,EAAPA;AAVK,SAAP;AAYD;;AACD,aAAO,IAAP;AACD;;;EApCwCd,eAAMiB,S;;;AAkEjDb,aAAa,CAACc,SAAd,GAA0B;AACxBhB,EAAAA,KAAK,EAAEiB,mBAAUC,MADO;AAExBJ,EAAAA,QAAQ,EAAEG,mBAAUE,IAAV,CAAeC,UAFD;AAGxBR,EAAAA,OAAO,EAAEK,mBAAUI;AAHK,CAA1B;AAMAnB,aAAa,CAACoB,YAAd,GAA6B;AAC3BtB,EAAAA,KAAK,EAAE,EADoB;AAE3BY,EAAAA,OAAO,EAAE;AAFkB,CAA7B;AAKO,IAAMW,aAAa,GAAG1B,YAAY,CAAC2B,QAAnC","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport deepmerge from 'deepmerge';\n\nimport colors from './colors';\nimport darkColors from './colorsDark';\n\nexport const ThemeContext = React.createContext({\n  theme: {\n    colors,\n  },\n});\n\nexport default class ThemeProvider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const defaultColors = props.useDark ? darkColors : colors;\n\n    this.defaultTheme = deepmerge(\n      {\n        colors: defaultColors,\n      },\n      props.theme\n    );\n    this.state = {\n      theme: this.defaultTheme,\n      useDark: props.useDark,\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const { useDark } = props;\n    if (useDark !== state.useDark) {\n      const defaultColors = useDark ? darkColors : colors;\n      return {\n        theme: deepmerge(\n          state.theme,\n          deepmerge(\n            {\n              colors: defaultColors,\n            },\n            props.theme\n          )\n        ),\n        useDark,\n      };\n    }\n    return null;\n  }\n  updateTheme = (updates) => {\n    this.setState(({ theme }) => ({\n      theme: deepmerge(theme, updates),\n    }));\n  };\n\n  replaceTheme = (theme) => {\n    this.setState(() => ({\n      theme: deepmerge(this.defaultTheme, theme),\n    }));\n  };\n\n  getTheme = () => this.state.theme;\n\n  render() {\n    return (\n      <ThemeContext.Provider\n        value={{\n          theme: this.state.theme,\n          updateTheme: this.updateTheme,\n          replaceTheme: this.replaceTheme,\n        }}\n      >\n        {this.props.children}\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nThemeProvider.propTypes = {\n  theme: PropTypes.object,\n  children: PropTypes.node.isRequired,\n  useDark: PropTypes.bool,\n};\n\nThemeProvider.defaultProps = {\n  theme: {},\n  useDark: false,\n};\n\nexport const ThemeConsumer = ThemeContext.Consumer;\n"]},"metadata":{},"sourceType":"script"}